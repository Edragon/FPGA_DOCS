#This file contains all the answers for the exercises.  This file is not meant to be executed as an SDC file.  
#   If you want, you may copy the SDC commands from this file into your own SDC file to execute.

# Ex 2, Step 2, #1) Assign a 100 MHz clock to the input pin clk_in_100mhz
create_clock -period 10 [get_ports clk_in_100mhz]

# Ex 2, Step 2, #3) Automatically create generated clocks on all of the PLL outputs
derive_pll_clocks

# or to create generated clocks as well as the base clock

derive_pll_clocks -create_base_clocks

# Ex 2, Step 2, #9) Copy the 3 create_generated_clock commands from test.sdc into top.sdc.
# Ex 2, Step 2, #10) Change each of the PLL generated output clock names to names more easily recognized
create_generated_clock -name c100 -source [get_pins {inst1|altpll_component|pll|inclk[0]}] -duty_cycle 50.000 \
	-multiply_by 1 -master_clock {clk_in_100mhz} [get_pins {inst1|altpll_component|pll|clk[0]}] -add
create_generated_clock -name c200 -source [get_pins {inst1|altpll_component|pll|inclk[0]}] -duty_cycle 50.000 \
	-multiply_by 2 -master_clock {clk_in_100mhz} [get_pins {inst1|altpll_component|pll|clk[1]}] -add
create_generated_clock -name c100_out -source [get_pins {inst1|altpll_component|pll|inclk[0]}] -duty_cycle 50.000 \
	-multiply_by 1 -master_clock {clk_in_100mhz} [get_pins {inst1|altpll_component|pll|clk[2]}] -add


# Ex 3, Step 1, #2) Constrain all input data pins
#                                     Min    Max
#                  Clock to output     1      3
#                        PCB Delay    0.5     1
#                       Clock Skew   -0.5    0.5
set_input_delay -clock clk_in_100mhz -max 4.5 [get_ports din*]
set_input_delay -clock clk_in_100mhz -min 1.0 [get_ports din*]

# or to break down the delay value

set_input_delay -clock clk_in_100mhz -max [expr 1 - (-0.5) + 3] [get_ports din*]
set_input_delay -clock clk_in_100mhz -min [expr 0.5 - 0.5 + 1] [get_ports din*]

# Ex 3, Step 1, #3)  Constrain the data output pins for a center-aligned source-
#   synchronous interface with a data valid window of 1 ns, ±500 ps with respect to clkout.
create_generated_clock -source [get_pins {inst1|altpll_component|pll|clk[2]}] -divide_by 1 [get_ports {clkout}]
set_output_delay -clock { clkout } -max 0.5 [get_ports {multout*}]
set_output_delay -clock { clkout } -min -0.5 [get_ports {multout*}]

# Ex 4, Step 1, #1)  Constrain the asynchronous reset input using false path
set_false_path -from [get_ports reset]

# Ex 4. Step 2, #2)  Make path from PLL c2 pin to clkout output a false path
set_false_path -from [get_pins {inst1|altpll_component|pll|clk[2]}] -to [get_ports {clkout}]

# Ex 4, Step 5, #1)  Use a setup multicycle constraint to correct internal failing paths
set_multicycle_path -from [get_pins {x_regtwo*|clk y_regtwo*|clk}] -setup -end 2

# Ex 4, Step 5, #2)  Use a hold multicycle constraint to correct internal failing paths
set_multicycle_path -from [get_pins {x_regtwo*|clk y_regtwo*|clk}] -hold -end 1

# Ex 4, Step 7, #3)  Add -clock_fall argument to multout_xy to indicate the downstream registers are falling edge
set_output_delay -clock { clkout } -max 0.5 [get_ports {multout_ab*}]
set_output_delay -clock { clkout } -min -0.5 [get_ports {multout_ab*}]
set_output_delay -clock { clkout } -max 0.5 -clock_fall [get_ports {multout_xy*}]
set_output_delay -clock { clkout } -min -0.5 -clock_fall [get_ports {multout_xy*}]

# Ex 4, Step 8, #8) Add -phase argument to c100_out generated clock SDC command to shift clkout
create_generated_clock -name c100_out -source [get_pins {inst1|altpll_component|pll|inclk[0]}] -duty_cycle 50.000 \
	-multiply_by 1 -phase -130.32 -master_clock {clk_in_100mhz} [get_pins {inst1|altpll_component|pll|clk[2]}] -add
